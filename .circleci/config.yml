#
#  Globality autogenerated CircleCI configuration
#
#  This file is auto generated with globality-build.
#  You should not make any changes to this file manually
#
#  Any changes made to this file will be overwritten in the
#  next version of the build.
#
#  See: http://github.com/globality-corp/globality-build
#
#
version: 2.1


executors:
  node-executor:
    working_directory: ~/repo
    docker:
      - image: cimg/node:14.19.0
        environment:
          EXTRA_INDEX_URL: "InjectedDuringRuntime"
          AWS_ECR_DOMAIN: "InjectedDuringRuntime"
          JFROG_AUTH: "InjectedDuringRuntime"
          APOLLO_ENGINE_API_KEY: "InjectedDuringRuntime"

  globality-build-executor:
    working_directory: ~/repo
    docker:
      - image: ${AWS_ECR_DOMAIN}/globality-build:2022.31.0
        aws_auth:
          aws_access_key_id: ${AWS_ACCESS_KEY_ID}
          aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        environment:
          EXTRA_INDEX_URL: "InjectedDuringRuntime"
          AWS_ECR_DOMAIN: "InjectedDuringRuntime"
          JFROG_AUTH: "InjectedDuringRuntime"

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: ${AWS_ECR_DOMAIN}/globality-build:2022.31.0
      aws_auth:
        aws_access_key_id: ${AWS_ACCESS_KEY_ID}
        aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"
        PYPI_AUTH_TOKEN: "InjectedDuringRuntime"
        PYPI_USERNAME: "InjectedDuringRuntime"
        PYPI_PASSWORD: "InjectedDuringRuntime"

deploy_defaults: &deploy_defaults
  working_directory: ~/repo
  docker:
    - image: ${AWS_ECR_DOMAIN}/globality-build:2022.31.0
      aws_auth:
        aws_access_key_id: ${AWS_ACCESS_KEY_ID}
        aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
      environment:
        EXTRA_INDEX_URL: "InjectedDuringRuntime"
        AWS_ECR_DOMAIN: "InjectedDuringRuntime"
        JFROG_AUTH: "InjectedDuringRuntime"
        PYPI_AUTH_TOKEN: "InjectedDuringRuntime"
        PYPI_USERNAME: "InjectedDuringRuntime"
        PYPI_PASSWORD: "InjectedDuringRuntime"


whitelist: &whitelist
  paths:
    .

jobs:
  checkout:
    <<: *defaults
    steps:
      - checkout


      - persist_to_workspace:
          root: ~/repo
          <<: *whitelist
  build_docker:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - setup_remote_docker:
          version: 19.03.12
          docker_layer_caching: true
      - run:
          name: Login AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_DOMAIN}
      - run:
          name: Build Docker - Application Service Code
          command: |
            # pwd is here to prevent error when pre_docker_build returns nothing
            pwd

            docker build --tag $AWS_ECR_DOMAIN/python-library:$CIRCLE_SHA1 \
              --build-arg BUILD_NUM=$CIRCLE_BUILD_NUM \
              --build-arg SHA1=$CIRCLE_SHA1 \
              --build-arg EXTRA_INDEX_URL=$EXTRA_INDEX_URL \
              --build-arg JFROG_AUTH=$JFROG_AUTH .

            docker push $AWS_ECR_DOMAIN/python-library:$CIRCLE_SHA1


  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker:
          version: 19.03.12
          docker_layer_caching: true

      - run:
          name: Login AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_DOMAIN}


      - run:
          name: Copy service tests to volume
          command: |
            docker create -v /src/microcosm/tests/ --name service_tests alpine:3.11 /bin/true
            docker cp $(pwd)/microcosm/tests service_tests:/src/microcosm/
      - run:
          name: Run Test
          command: |
            docker run -it  --volumes-from service_tests ${AWS_ECR_DOMAIN}/python-library:${CIRCLE_SHA1} test
  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker:
          version: 19.03.12
          docker_layer_caching: true

      - run:
          name: Login AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_DOMAIN}
      - run:
          name: Copy service tests to volume
          command: |
            docker create -v /src/microcosm/tests/ --name service_tests alpine:3.11 /bin/true
            docker cp $(pwd)/microcosm/tests service_tests:/src/microcosm/
      - run:
          name: Run Lint
          command: |
            docker run -it --volumes-from service_tests ${AWS_ECR_DOMAIN}/python-library:${CIRCLE_SHA1} lint



  typehinting:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - setup_remote_docker:
          version: 19.03.12
          docker_layer_caching: true

      - run:
          name: Login AWS ECR
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_DOMAIN}
      - run:
          name: Copy service tests to volume
          command: |
            docker create -v /src/microcosm/tests/ --name service_tests alpine:3.11 /bin/true
            docker cp $(pwd)/microcosm/tests service_tests:/src/microcosm/
      - run:
          name: Run Typehinting
          command: |
            docker run -it --volumes-from service_tests ${AWS_ECR_DOMAIN}/python-library:${CIRCLE_SHA1} typehinting



  deploy_jfrog_rc:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Override Version
          command: |
            sed -i -e "s/^\(version = \".*\)\"$/\1.dev${CIRCLE_BUILD_NUM}\"/" setup.py
      - run:
          name: Authenticate
          command: |
            echo "[distutils]" > ~/.pypirc
            echo "index-servers =" >> ~/.pypirc
            echo "    jfrog" >> ~/.pypirc
            echo >> ~/.pypirc
            echo "[jfrog]" >> ~/.pypirc
            echo "repository:https://globality.jfrog.io/globality/api/pypi/pypi" >> ~/.pypirc
            echo "username:$JFROG_USERNAME" >> ~/.pypirc
            echo "password:$JFROG_PASSWORD" >> ~/.pypirc
            echo >> ~/.pypirc
      - run:
          name: Publish
          command: python setup.py sdist upload -r jfrog
  publish_library:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo
      - run:
          name: Publish
          command: |
            echo "[distutils]" > ~/.pypirc
            echo "index-servers =" >> ~/.pypirc
            echo "    pypi " >> ~/.pypirc
            echo >> ~/.pypirc
            echo "[pypi]" >> ~/.pypirc
            echo "repository = https://upload.pypi.org/legacy/" >> ~/.pypirc
            echo "username = __token__" >> ~/.pypirc
            echo "password = ${PYPI_AUTH_TOKEN}" >> ~/.pypirc
            echo >> ~/.pypirc
            version=$(cat .bumpversion.cfg | awk '/current_version / {print $3}')
            python setup.py register -r pypi
            python setup.py sdist
            twine upload --repository pypi dist/microcosm-${version}.tar.gz


workflows:

  build-and-release:
    jobs:
      - checkout:
          context:
          - Globality-Common
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - build_docker:
          context:
          - Globality-Common
          requires:
            - checkout
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - lint:
          context:
          - Globality-Common
          requires:
            - build_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - test:
          context:
          - Globality-Common
          requires:
            - build_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - deploy_jfrog_rc:
          context:
          - Globality-Common
          requires:
            - test
            - lint
            - typehinting
      - typehinting:
          context:
          - Globality-Common
          requires:
            - build_docker
          filters:
            # run for all branches and tags
            tags:
              only: /.*/
      - publish_library:
          context:
          - Globality-Common
          - Python-Context
          requires:
            - test
            - lint
            - typehinting
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*/
